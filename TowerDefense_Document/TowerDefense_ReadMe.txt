■ポートフォリオ3: タワーディフェンスゲーム

開発環境
UnrealEngine4, Visual Studio 2019 , GitLab

概要：

・制作実績　（2022年8月～10月）
　①作品名: TowerDefence
 　　概要: 大量に迫りくる敵から、攻撃キャラを道に配置しつつ拠点を守りきるタワーディフェンスゲームです。
           敵の特性や迫っている敵の数などの状況から、戦略をリアルタイムに考えて実行し、その戦略がうまく行ったときの気持ちよさがこのゲームの醍醐味です。
           その気持ちよさを深める為には、様々な選択が出来る状況を作れる必要があると考えています。
           その為、敵の出現位置や時間、ステータスを自由に変更出来たり、味方キャラの特性などに幅を持たせました。

　　 ☆制作に用いた技術
　　　〇ステート管理によって各オブジェクトの処理の遷移や管理をしています。特にキャラクターや敵の行動をステート管理で行い、処理の追加がしやすい設計にしています。

　　　〇データ管理をCSVファイルで行っています。データを外部に出すことでプログラマー以外の方でも、難易度調整が出来る設計を作りました。

　　　〇クラスごとのオブジェクト指向での実装。継承やポリモーフィズムを意識したクラスの実装を行いました。

　　　〇最初に設計したUML図から大きな変更なく、最後まで実装することが出来た。特にMediatorパターンを用いて、極力各オブジェクトが参照し合うことが少なくなるよう設計しました。

　　　〇独自にアルゴリズムを考えて、敵による攻撃対象の索敵処理を実装しました。


 　　☆技術を用いて実装した項目
　　　〇ステート管理によって各オブジェクトの処理の遷移や管理をしています。
      ・キャラクターの状態遷移の管理と各ステートでの行動処理の実装
      　→・キャラクター同士のバトル処理の実装
          ・キャラクターの索敵処理
　　　　　・出撃中のキャラをクリックした時の撤退処理(クリックされたイベントをキャラが受け取り、自身の破棄の依頼をスポナーに依頼)
  　　　　・敵キャラの移動処理(SetActorLocation関数を用いた座標移動処理)
      ・現在のステートをUIなどで表示し、把握することでバグが起きても把握しやすく、修正もしやすいです。
　　
　　　
      〇データ管理をCSVファイルで行っています。データを外部に出すことでプログラマー以外の方でも、難易度調整が出来る設計を作りました。
　　　・C++のifstreamを用いたCSVファイルの読み込み。データを読み込むDetaManagerクラスの実装
      ・キャラクターのステータスをCSVファイルから設定出来る機能
      ・敵キャラのスポーン地点からのスポーン処理とその管理(CSVファイルから出現する敵の数、種類、出現時間等を変更可能にした)
　　　・キャラの出撃コストの機能(キャラが出撃すると、必要なコストが消費される。敵を倒すとコストが回復する等)
　　　・CSVファイルで設定するだけでステージの広さやスポーン地点の位置などを変更出来ます。
      ・ゲーム説明UIの画像や説明文の設定がCSVファイルで行えます。
　　　
      〇クラスごとのオブジェクト指向での実装
      ・沢山のキャラクタークラスを生成し動作させるので、同じ配列で管理出来るように、味方や敵キャラのクラスに共通するBaseクラスを実装しました。
        また敵と味方共通のクラスから派生するので、お互いが呼び出す処理を基底クラスで実装されていれば、クラスと味方クラス同士参照する必要がない利点もあります。(ダメージを与える処理など)
      ・キャラクターの種類を増やせるように、Baseキャラクタークラスから派生した、味方キャラの基礎クラス、敵クラスの基礎クラスも実装しています。
　　　・フィールドに出現する味方キャラや敵キャラは独自で動作するようになっており、配置するだけで動かすことが出来ます。

　　　〇最初に設計したUML図から大きな変更なく、最後まで実装することが出来た。特にMediatorパターンを用いて、
　　　　極力各オブジェクトが参照し合うことが少なくなるよう設計しました。
　　　・GameModeを全体のオブジェクトのマネージャー=仲介者とみなして、各オブジェクト間のやりとりの仲介の場としました。
　　　　参照する必要のないオブジェクト同士の参照を減らし独立性を高めました。
      ・クラスが追加され、元々参照する予定の無かったクラスの関係が生まれても、GameModeをインターフェースとすることで、
　　　　アクセスしたいクラスに柔軟にアクセスでき、大きく設計を変えることなく追加実装が出来ました。
　　　
　　　〇独自にアルゴリズムを考えて、敵による攻撃対象の索敵処理を実装しました。
	・キャラクターによる、敵の索敵処理のロジックの構想と実装
　　　　  1.ステージの状態や存在を定義したFieldクラスを実装。そのクラスにステージの座標を表す二次元配列を2つ用意。
　　　　　 (キャラクタークラスのオブジェクトのポインタを入れる二次元配列と、
           ステージのマス一つ一つが壁なのか、道なのかの情報を入れる二次元配列を用意)
　　　　　2.索敵処理を敵オブジェクトがCallし、GameModeを仲介して、Fieldクラスに存在する、
           キャラクタポインタ2次元配列の特定の8方向の範囲内を調べる。※
　　　　　3.その範囲にキャラクターのオブジェクトが存在しているかを検索し、
　　　　　存在したら一旦、発見リストの配列に入れて、FieldクラスからGameModeに戻り値で発見リストの配列を返す。
          4.その配列から一つずつポインタを取り出し、敵か味方かを判別した後、敵であれば
            索敵処理を呼び出したキャラクターに攻撃対象としてそのポインタを渡す。
          5.敵キャラは、その攻撃対象に攻撃処理を実行。

　　　　　※2において、調べる配列の範囲は、索敵処理を呼び出したキャラオブジェクトの現在のXY座標を基準点とし、
　　　　　　さらに同オブジェクトに設定された、X軸とY軸方向それぞれに何マスずつ座標を見るかの索敵範囲の値を読み出して、その範囲を調べている。
          
　　　　　実装においての工夫
          ・8方向見るにあたって、8方向を表す列挙型を定義し、それらを配列に入れたものをfor文で回し、
            switchで方向毎の処理を分岐させました。そうすることで、処理の見やすさと複雑さを軽減しました。
          ・キャラに設定する索敵範囲の値に制限を加えないようにしました。値によっては、配列の範囲を超えてしまうので、超えないように値の調整の処理を加えました。
          


　    ●UIやアニメーションなどのビジュアル要素
　　　・敵や味方オブジェクトのステートに従って、アニメーションも遷移させるアニメーション制御
      ・キャラクターの攻撃時に攻撃エフェクトを発生させる処理
      ・キャラクターが戦闘状態に遷移したときの攻撃ターゲットを示すUIの作成と処理
　　　・キャラクターの現在の状態の表示(索敵状態か戦闘状態なのか等)
      ・キャラの出撃リストUIの実装
      ・制限時間とコスト消費の値の変化をUIに反映させる処理
      ・キャラリストのキャラアイコンクリック時のUIの変化の実装(選択可能かどうかなどが分かるUIが表示)
      ・キャラリストのキャラアイコンにマウスカーソルを重ねた時のキャラステータスUI出現処理
　　　・ステージのマスのマテリアルの色の動的変更処理(キャラの出撃の時に、出撃可能地点にマウスを重ねると攻撃可能範囲が赤色に変化)
      ・出撃可能地点からエフェクトを発生させる処理
      ・プレイ説明UIの実装(使用する画像や文章をCSVファイルから設定出来るように実装)
　　
　　　
  　　  
 　　☆実装に注力した部分：
  　　・非エンジニアでも出現させる敵やキャラクターの各ステータスをExcelを用いて簡単に変更出来るように実装した部分です。
   　　 UEのデータテーブルを用いずC++の機能を使って実装したことにより、
　　　  UE4を全く使ったことのない人でもゲームの設定が変更出来るように実装してあります。
        エクセルの内容を変更→保存→ゲームを起動というプロセルですぐさま内容が反映されるので、
　　  　ゲームバランスの調整効率をかなりあげられると感じています。
　　　  キャラのステータス、敵の出現頻度や数と種類、制限時間、ステージの構成など
　　　  考えられる範囲で調整したいであろう部分はExcelでいじれるようになっています。

　　　・UIの部分にも意識を注ぎました。ユーザーが操作した結果がUIやエフェクトとして表れることで今なにをしたのか、
　　　　操作が正しく出来ているのかを理解出来るようにしました。
      　操作をした後、見た目や動作に変化がはっきりあって気持ち良いと思えるような実装が出来たと思います。

      ・全体的なクラス設計や追いやすい処理の流れにも注力しました。GameModeにキャラ管理クラスや
　　　  ゲーム進行管理クラスなどの各マネージャーの参照を持たせました。
　　　  さらにGameModeにUInterfaceを継承したインターフェースクラスの関数を実装し、そのインターフェースを各マネージャーに渡すことで、
　　　  参照を持たないクラス間のやりとりをGameModeで行わせるような設計にしました。


　　☆ 制作を通して学んだこと：
  　　・しっかりと各オブジェクトを管理するという大切さを学びました。オブジェクトの生成や破棄などの管理を決められたクラスで行い、
　　　　必要なクラスに渡すという流れを意識することで、処理も追いやすく不具合が起きても対処がしやすいことを学びました。
　　　
　　　・一方で一つのクラスに全てを管理させることで、その一つのクラスが煩雑になってしまうことも学びました。
　　　　参照を持たないクラス間のデータのやりとりはGameModeで全て行われる設計になっているので、GameModeを見れば不具合など分かりやすいですが、
　　　　その分煩雑にもなりやすいということが分かったので、こういった設計をするときの次の改善点だと学びました。

　　　・UE4の機能に頼り切らない意識も育むことが出来ました。UEには便利な機能が沢山あり、それを使いがちですが、
　　　　実装したい機能が微妙にUEで実現できるものとは異なる場合に
　　　　自分で実装出来るという経験と意識を学びました。UEだけではなく基礎となるC++の力の大切さも学びました。